// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  driver
  supervisor
}

enum UserStatus {
  pending
  active
  disabled
}

model User {
  userId            String          @id @unique @default(uuid())
  username          String          @unique
  password          String
  refreshTokens     RefreshToken[]
  role              UserRole
  status            UserStatus
  tasks             TaskDriver[]
  taskNote          TaskNote[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model RefreshToken {
  refreshTokenId  String    @id @unique @default(uuid())
  hashedToken     String
  userId          String
  User            User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  revoked         Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum TaskType {
  trash
  sewer
  van
}

enum TaskStatus {
  pending
  active
  done
  billed
}

model Task {
  taskId         String           @id @unique @default(uuid())
  type           TaskType
  title          String           @db.Text
  date           DateTime
  description    String           @db.LongText
  notes          TaskNote[]
  drivers        TaskDriver[]  
  status         TaskStatus  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt    
}

model TaskNote {
  taskNoteId    String          @id @unique @default(uuid())
  content       String          @db.MediumText
  date          DateTime
  user          User @relation(fields: [userId], references: [userId])    
  userId        String
  task          Task @relation(fields: [taskId], references: [taskId])    
  taskId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model TaskDriver {
  taskDriverId  String          @id @unique @default(uuid())
  date          DateTime
  user          User @relation(fields: [userId], references: [userId])    
  userId        String
  task          Task @relation(fields: [taskId], references: [taskId])    
  taskId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}